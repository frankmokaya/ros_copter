#!/usr/bin/env python
PACKAGE = "ros_copter"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Velocity PID (uv)
gen.add("uP", double_t, 0, "Proportional gain for velocity", 0, 0, 5) # Default, Low, High
gen.add("uI", double_t, 0, "Integral gain for velocity", 0, 0, 1)
gen.add("uD", double_t, 0, "Derivative gain for velocity", 0, 0, 5)
gen.add("vP", double_t, 0, "Proportional gain for velocity", 0, 0, 5) # Default, Low, High
gen.add("vI", double_t, 0, "Integral gain for velocity", 0, 0, 1)
gen.add("vD", double_t, 0, "Derivative gain for velocity", 0, 0, 5)
gen.add("uvtau", double_t, 0, "Velocity Tau", 0, 0, 1)

# Position PID (ned)
gen.add("nP", double_t, 0, "Proportional gain for position", 0, 0, 10)
gen.add("nI", double_t, 0, "Integral gain for position", 0, 0, 1)
gen.add("nD", double_t, 0, "Derivative gain for position", 0, 0, 10)
gen.add("eP", double_t, 0, "Proportional gain for position", 0, 0, 10)
gen.add("eI", double_t, 0, "Integral gain for position", 0, 0, 1)
gen.add("eD", double_t, 0, "Derivative gain for position", 0, 0, 10)
gen.add("dP", double_t, 0, "Proportional gain for position", 0, 0, 100)
gen.add("dI", double_t, 0, "Integral gain for position", 0, 0, 1)
gen.add("dD", double_t, 0, "Derivative gain for position", 0, 0, 100)
gen.add("nedtau", double_t, 0, "Position Tau", 0, 0, 1)

# Yaw
gen.add("yawP", double_t, 0, "Proportional gain for yaw", 0, 0, 5)
gen.add("yawI", double_t, 0, "Integral gain for yaw", 0, 0, 1)
gen.add("yawD", double_t, 0, "Derivative gain for yaw", 0, 0, 5)
gen.add("yawtau", double_t, 0, "Yaw Tau", 0, 0, 1)

# Additional params
gen.add("xIntegrator",   bool_t,   0, "Use xIntegrator",  True)
gen.add("uIntegrator",   bool_t,   0, "Use yIntegrator",  True)
gen.add("thrust_to_hover_bias", double_t, 0, "Thrust required to hover (mg)", 0, 0, 50)

exit(gen.generate(PACKAGE, "ros_copter_pid", "gains")) # Creates gainsConfig.h (same name as file)
#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
#gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                       gen.const("Medium",     int_t, 1, "A medium constant"),
#                       gen.const("Large",      int_t, 2, "A large constant"),
#                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
